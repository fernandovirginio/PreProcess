/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.preprocess.forms;

import br.preprocess.App;
import br.preprocess.core.Dataset;
import br.preprocess.core.DecisionTreeC45;
import br.preprocess.core.HomogeneousEnsemble;
import br.preprocess.core.KNearestNeighbour;
import br.preprocess.core.MultilayerPerceptron;
import br.preprocess.core.NaiveBayes;
import javax.swing.JOptionPane;

/**
 *
 * @author Fernando
 */
public class EnsembleHomogeneo extends javax.swing.JDialog {

    private final App parent;
    private HomogeneousEnsemble ensH;
    
    /**
     * Creates new form WindowModel
     * @param parent
     * @param modal
     */
    public EnsembleHomogeneo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = (App) parent;
        this.setLocation(parent.getLocation());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        classAD = new javax.swing.JCheckBox();
        classKNN = new javax.swing.JCheckBox();
        classMLP = new javax.swing.JCheckBox();
        classNB = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        strategy = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        iterate = new javax.swing.JTextField();
        btnTest = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        reduction = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ensStats = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(" Testes com Ensembles Homogêneos");
        setIconImage(null);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuração"));

        jLabel1.setText("<html> Selecione os algoritmos de aprendizado para os <strong>classificadores base</strong> dos ensembles homogêneos: </html>");

        classAD.setBackground(new java.awt.Color(255, 255, 255));
        classAD.setText("Árv. Decisão (C4.5)");

        classKNN.setBackground(new java.awt.Color(255, 255, 255));
        classKNN.setText("k-NN");

        classMLP.setBackground(new java.awt.Color(255, 255, 255));
        classMLP.setText("Multilayer Perceptron (MLP)");

        classNB.setBackground(new java.awt.Color(255, 255, 255));
        classNB.setText("Naïve Bayes");

        jLabel2.setText("Estratégia de aprendizado:");

        strategy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bagging", "Boosting (Adaboost)", "Bagging Seleção" }));

        jLabel3.setText("Iterações**:");

        btnTest.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnTest.setText("Iniciar testes***");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        jLabel4.setText("<html> **Utilize <strong>,</strong> (vírgula) para separar as iterações, não utilize espaços entre os valores. Ex: 12,24,48. <br /> ***Este processo pode levar um tempo considerável. </html>");

        jLabel6.setText("Redução*:");

        reduction.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 0.9d, 0.1d));

        jLabel7.setText("<html> *Esta opção tem efeito adicional no Bagging com seleção de atributos. </html>");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(classAD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classKNN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classMLP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classNB))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iterate))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strategy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(reduction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addContainerGap())))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTest)
                                .addContainerGap())))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classAD)
                    .addComponent(classKNN)
                    .addComponent(classMLP)
                    .addComponent(classNB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(strategy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(reduction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(iterate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTest)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ensStats.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        ensStats.setFocusable(false);
        jScrollPane2.setViewportView(ensStats);

        jLabel5.setText("Resultados:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        if (this.iterate.getText().equals("")) {
            JOptionPane.showMessageDialog(parent, "Por favor, informe pelo menos um valor de iteração.");
            return;
        }
        Dataset ds = this.parent.getDsManipulavel().clonar();
        ds.reduceAttrRandom(1-(double) this.reduction.getValue());
        
        String status = "";
        String[] iterateS = this.iterate.getText().split(",");
        String strategyName = (this.strategy.getSelectedIndex() == HomogeneousEnsemble.BAGGING)?
                "Método Bagging\n":(this.strategy.getSelectedIndex() == HomogeneousEnsemble.BOOSTING)?
                "Método Boosting (Adaboost)\n":"Método Bagging com Seleção de Atributos\n";
        if (this.classAD.isSelected()) {
            status += "Resultados para Árvore de Decisão C4.5\n"
                   + "=======================================\n\n";
            DecisionTreeC45 ad = new DecisionTreeC45(0.25, true);
            ad.setDataset(ds, parent.getSplitRatio());
            ad.setCrossV(true);
            ad.execute();
            ad.improve(0);
            status += "Classificador individual\n"
                    + "\tConfiguração: "+((ad.isPruned())?"com poda, fator de confiança: "+ad.getcFactor():"sem poda")+"\n"
                    + "\tTaxa de acerto: "+ad.getEvl().pctCorrect()+"%\n\n"
                    + strategyName;
            for (String it : iterateS) {
                this.ensH = new HomogeneousEnsemble(this.strategy.getSelectedIndex(), Integer.parseInt(it));
                this.ensH.setDataset(ds.clonar(), parent.getSplitRatio());
                this.ensH.setCrossV(true);
                this.ensH.setReductRatio((double) this.reduction.getValue());
                this.ensH.execute(ad.getWekaParameters());
                status += "\tNº iterações: "+it+"\tTaxa de acerto: "+this.ensH.getEvl().pctCorrect()+"%\n";
            }
            status += "\n";
        }
        if (this.classKNN.isSelected()) {
            status += "Resultados para k-NN\n"
                   + "=====================\n\n";
            KNearestNeighbour knn = new KNearestNeighbour(3, false);
            knn.setDataset(ds, parent.getSplitRatio());
            knn.setCrossV(true);
            knn.execute();
            knn.improve(20);
            status += "Classificador individual\n"
                    + "\tConfiguração: k="+knn.getK()+", "+((knn.isWeight())?"com peso":"sem peso")+"\n"
                    + "\tTaxa de acerto: "+knn.getEvl().pctCorrect()+"%\n\n"
                    + strategyName;
            for (String it : iterateS) {
                this.ensH = new HomogeneousEnsemble(this.strategy.getSelectedIndex(), Integer.parseInt(it));
                this.ensH.setDataset(ds.clonar(), parent.getSplitRatio());
                this.ensH.setCrossV(true);
                this.ensH.setReductRatio((double) this.reduction.getValue());
                this.ensH.execute(knn.getWekaParameters());
                status += "\tNº iterações: "+it+"\tTaxa de acerto: "+this.ensH.getEvl().pctCorrect()+"%\n";
            }
            status += "\n";
        }
        if (this.classMLP.isSelected()) {
            status += "Resultados para Multilayer Perceptron (MLP)\n"
                   + "============================================\n\n";
            MultilayerPerceptron mlp = new MultilayerPerceptron(1, 0.01, 100, 0);
            mlp.setDataset(ds, parent.getSplitRatio());
            mlp.execute();
            mlp.improve(10);
            status += "Classificador individual\n"
                    + "\tConfiguração: neurônios cam. oculta="+mlp.getNeuro()
                    + ", tx aprendizado="+mlp.getLearnRate()
                    + ", épocas="+mlp.getEpochs()+"\n"
                    + "\tTaxa de acerto: "+mlp.getEvl().pctCorrect()+"%\n\n"
                    + strategyName;
            for (String it : iterateS) {
                this.ensH = new HomogeneousEnsemble(this.strategy.getSelectedIndex(), Integer.parseInt(it));
                this.ensH.setDataset(ds.clonar(), parent.getSplitRatio());
                this.ensH.setCrossV(true);
                this.ensH.setReductRatio((double) this.reduction.getValue());
                this.ensH.execute(mlp.getWekaParameters());
                status += "\tNº iterações: "+it+"\tTaxa de acerto: "+this.ensH.getEvl().pctCorrect()+"%\n";
            }
            status += "\n";
        }
        if (this.classNB.isSelected()) {
            status += "Resultados para Naïve Bayes\n"
                   + "============================\n\n";
            NaiveBayes nb = new NaiveBayes(false, false);
            nb.setDataset(ds, parent.getSplitRatio());
            nb.setCrossV(true);
            nb.execute();
            nb.improve(0);
            status += "Classificador individual\n"
                    + "\tConfiguração: "+((nb.isKernel())?"com estimador kernel":"sem estimador kernel")
                    + ", "+((nb.isDiscretize())?"com discretização":"sem discretização")+"\n"
                    + "\tTaxa de acerto: "+nb.getEvl().pctCorrect()+"%\n\n"
                    + strategyName;
            for (String it : iterateS) {
                this.ensH = new HomogeneousEnsemble(this.strategy.getSelectedIndex(), Integer.parseInt(it));
                this.ensH.setDataset(ds.clonar(), parent.getSplitRatio());
                this.ensH.setCrossV(true);
                this.ensH.setReductRatio((double) this.reduction.getValue());
                this.ensH.execute(nb.getWekaParameters());
                status += "\tNº iterações: "+it+"\tTaxa de acerto: "+this.ensH.getEvl().pctCorrect()+"%\n";
            }
            status += "\n";
        }
        this.ensStats.setText(status);
        JOptionPane.showMessageDialog(parent, "Testes concluídos, verifique os resultados.");
    }//GEN-LAST:event_btnTestActionPerformed
    
    public void open() {
        this.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTest;
    private javax.swing.JCheckBox classAD;
    private javax.swing.JCheckBox classKNN;
    private javax.swing.JCheckBox classMLP;
    private javax.swing.JCheckBox classNB;
    private javax.swing.JTextPane ensStats;
    private javax.swing.JTextField iterate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner reduction;
    private javax.swing.JComboBox strategy;
    // End of variables declaration//GEN-END:variables
}
