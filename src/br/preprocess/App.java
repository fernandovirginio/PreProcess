/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.preprocess;

import br.preprocess.core.Chart;
import br.preprocess.core.Dataset;
import br.preprocess.core.KNearestNeighbour;
import br.preprocess.forms.About;
import br.preprocess.forms.EnsembleHomogeneo;
import br.preprocess.forms.ReducaoAtributos;
import br.preprocess.forms.ReducaoInstancias;
import br.preprocess.forms.ReducaoLDA;
import br.preprocess.forms.ReducaoPCA;
import br.preprocess.utils.Utils;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableModel;

/**
 *
 * @author Fernando
 */
public class App extends javax.swing.JFrame {

    private final KNearestNeighbour knn = new KNearestNeighbour(1, false);
    private Dataset dsManipulavel;
    private final Chart knnCH;
    private final Chart hisCH;
            
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2,
                dim.height/2-this.getSize().height/2);
        this.knnCH = new Chart(this.knnChart.getWidth(), this.knnChart.getHeight(),
                    "KNN Busca", "Valores de K", "Taxa de Acerto", Chart.CHART_LINE, false);
        this.knnCH.addXYSerie("Sem peso");
        this.knnCH.addXYSerie("Com peso");
        this.hisCH = new Chart(this.baseHistogram.getWidth(), this.baseHistogram.getHeight(),
                    "Histograma", "Classes", "Instâncias", Chart.CHART_HISTOGRAM, true);
        this.hisCH.addXYSerie("Classe");
        Utils.addPlot(this.knnChart, this.knnCH);
        this.habilitar(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        knnPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        knnK = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        knnChart = new javax.swing.JPanel();
        knnDW = new javax.swing.JComboBox();
        knnExecute = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        knnMelhore = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        knnStats = new javax.swing.JTextPane();
        baseIcone = new javax.swing.JLabel();
        baseStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        baseSplit = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        baseTabela = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        baseLog = new javax.swing.JTextPane();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        baseNAtr = new javax.swing.JLabel();
        baseNAtrN = new javax.swing.JLabel();
        baseNAtrC = new javax.swing.JLabel();
        baseNIns = new javax.swing.JLabel();
        baseNCla = new javax.swing.JLabel();
        baseHistogram = new javax.swing.JPanel();
        menu = new javax.swing.JMenuBar();
        menuBase = new javax.swing.JMenu();
        menuBaseAbrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuBaseSair = new javax.swing.JMenuItem();
        menuPre = new javax.swing.JMenu();
        menuPreReverter = new javax.swing.JMenuItem();
        menuPreExportar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuPreConversao = new javax.swing.JMenu();
        menuPreConversaoNumerico = new javax.swing.JMenuItem();
        menuPreNorm = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuPreRedInst = new javax.swing.JMenuItem();
        menuPreRedAttr = new javax.swing.JMenuItem();
        menuPreRed = new javax.swing.JMenu();
        menuPreRedLDA = new javax.swing.JMenuItem();
        menuPreRedPCA = new javax.swing.JMenuItem();
        menuEns = new javax.swing.JMenu();
        menuEnsHomo = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();
        menuSobreInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pré-processamento de Dados");
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        knnPanel.setBackground(new java.awt.Color(255, 255, 255));
        knnPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("k-NN"));

        jLabel1.setText("<html>Valor de <strong>k</strong>:</html>");

        knnK.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel2.setText("Utilizar peso na distância:");

        knnChart.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout knnChartLayout = new javax.swing.GroupLayout(knnChart);
        knnChart.setLayout(knnChartLayout);
        knnChartLayout.setHorizontalGroup(
            knnChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
        knnChartLayout.setVerticalGroup(
            knnChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        knnDW.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Não", "Sim" }));

        knnExecute.setText("Executar k-NN");
        knnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knnExecuteActionPerformed(evt);
            }
        });

        jLabel3.setText("<html>\n<p>\nVocê também pode buscar a <strong>melhor configuração</strong> para o classificador k-NN:\n</p>\n</html>");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        knnMelhore.setText("Avaliar k-NN");
        knnMelhore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knnMelhoreActionPerformed(evt);
            }
        });

        knnStats.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        knnStats.setFocusable(false);
        knnStats.setPreferredSize(new java.awt.Dimension(326, 153));
        jScrollPane1.setViewportView(knnStats);

        javax.swing.GroupLayout knnPanelLayout = new javax.swing.GroupLayout(knnPanel);
        knnPanel.setLayout(knnPanelLayout);
        knnPanelLayout.setHorizontalGroup(
            knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(knnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(knnPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(knnK, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(knnPanelLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(knnDW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(knnExecute)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(knnMelhore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(knnChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );
        knnPanelLayout.setVerticalGroup(
            knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(knnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(knnChart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(knnPanelLayout.createSequentialGroup()
                        .addGroup(knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(knnK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(knnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(knnDW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(knnExecute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(knnMelhore))
                    .addComponent(jScrollPane1))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        baseIcone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/preprocess/img/img1Gray.png"))); // NOI18N

        baseStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        baseStatus.setText("Não há base de dados carregada.");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Divisão da Base"));

        jLabel4.setText("Treinamento:");

        baseSplit.setModel(new javax.swing.SpinnerNumberModel(0.7d, 0.1d, 0.9d, 0.1d));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("O restante da base será usada nos testes.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(baseSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(baseSplit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações da Base de Dados"));

        baseTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Attributo", "Nome", "Tipo", "Escala", "Média", "Desv. Pad.", "Variância"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        baseTabela.setRowSorter(new TableRowSorter<TableModel>(this.baseTabela.getModel())
        );
        jScrollPane4.setViewportView(baseTabela);

        jLabel6.setText("Log:");

        baseLog.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        baseLog.setFocusable(false);
        jScrollPane2.setViewportView(baseLog);

        jLabel7.setText("Nº de Instâncias:");

        jLabel8.setText("Nº de Atributos:");

        jLabel9.setText("Numéricos:");

        jLabel10.setText("Categóricos:");

        jLabel11.setText("Nº de Classes:");

        baseNAtr.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        baseNAtrN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        baseNAtrC.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        baseNIns.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        baseNCla.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        baseHistogram.setBackground(new java.awt.Color(255, 255, 255));
        baseHistogram.setForeground(new java.awt.Color(240, 240, 240));

        javax.swing.GroupLayout baseHistogramLayout = new javax.swing.GroupLayout(baseHistogram);
        baseHistogram.setLayout(baseHistogramLayout);
        baseHistogramLayout.setHorizontalGroup(
            baseHistogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        baseHistogramLayout.setVerticalGroup(
            baseHistogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel9)))
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(baseNAtr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(baseNAtrC, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                    .addComponent(baseNAtrN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(baseNCla, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                    .addComponent(baseNIns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baseHistogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(baseNAtr, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(baseNAtrN, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(baseNAtrC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(baseNIns, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11))
                                    .addComponent(baseNCla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 5, Short.MAX_VALUE))
                            .addComponent(baseHistogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(knnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(baseIcone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(baseIcone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(baseStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(knnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBase.setText("Iniciar");

        menuBaseAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuBaseAbrir.setText("Carregar base de dados");
        menuBaseAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBaseAbrirActionPerformed(evt);
            }
        });
        menuBase.add(menuBaseAbrir);
        menuBase.add(jSeparator1);

        menuBaseSair.setText("Sair");
        menuBaseSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBaseSairActionPerformed(evt);
            }
        });
        menuBase.add(menuBaseSair);

        menu.add(menuBase);

        menuPre.setText("Pré-processamento");

        menuPreReverter.setText("Reverter base");
        menuPreReverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreReverterActionPerformed(evt);
            }
        });
        menuPre.add(menuPreReverter);

        menuPreExportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuPreExportar.setText("Exportar base");
        menuPreExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreExportarActionPerformed(evt);
            }
        });
        menuPre.add(menuPreExportar);
        menuPre.add(jSeparator2);

        menuPreConversao.setText("Conversão de tipos");

        menuPreConversaoNumerico.setText("Categórico para Binário");
        menuPreConversaoNumerico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreConversaoNumericoActionPerformed(evt);
            }
        });
        menuPreConversao.add(menuPreConversaoNumerico);

        menuPre.add(menuPreConversao);

        menuPreNorm.setText("Normalizar [0, 1]");
        menuPreNorm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreNormActionPerformed(evt);
            }
        });
        menuPre.add(menuPreNorm);
        menuPre.add(jSeparator3);

        menuPreRedInst.setText("Redução de instâncias");
        menuPreRedInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreRedInstActionPerformed(evt);
            }
        });
        menuPre.add(menuPreRedInst);

        menuPreRedAttr.setText("Redução de atributos");
        menuPreRedAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreRedAttrActionPerformed(evt);
            }
        });
        menuPre.add(menuPreRedAttr);

        menuPreRed.setText("Redução de atributos por análise");

        menuPreRedLDA.setText("Linear Discriminant Analysis (LDA)");
        menuPreRedLDA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreRedLDAActionPerformed(evt);
            }
        });
        menuPreRed.add(menuPreRedLDA);

        menuPreRedPCA.setText("Principal Component Analysis (PCA)");
        menuPreRedPCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPreRedPCAActionPerformed(evt);
            }
        });
        menuPreRed.add(menuPreRedPCA);

        menuPre.add(menuPreRed);

        menu.add(menuPre);

        menuEns.setText("Ensembles");

        menuEnsHomo.setText("Testes com Homogêneos");
        menuEnsHomo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEnsHomoActionPerformed(evt);
            }
        });
        menuEns.add(menuEnsHomo);

        menu.add(menuEns);

        menuSobre.setText("Sobre");

        menuSobreInfo.setText("Informação");
        menuSobreInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreInfoActionPerformed(evt);
            }
        });
        menuSobre.add(menuSobreInfo);

        menu.add(menuSobre);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuBaseAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBaseAbrirActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Selecione um arquivo ARFF:");
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setFileFilter(new FileNameExtensionFilter("Base de dados ARFF", "arff"));
        int action = jfc.showOpenDialog(this);
        if (action == JFileChooser.APPROVE_OPTION) {
            this.dsManipulavel = new Dataset(jfc.getSelectedFile().getAbsolutePath());
            if (this.dsManipulavel.loadDataset()) {
                this.habilitar(true);
                this.baseIcone.setIcon(new ImageIcon(getClass().getResource("/br/preprocess/img/img1.png")));
                this.baseStatus.setText("<html>Base de dados <strong>"+this.dsManipulavel.getDatasetName()+"</strong> carregada.</html>");
                this.insertLog("Carregou a base de dados "+this.dsManipulavel.getDatasetName());
                this.updateAll();
            } else
                JOptionPane.showMessageDialog(this, "Não foi possível carregar a base "
                        + "de dados.");
        }
    }//GEN-LAST:event_menuBaseAbrirActionPerformed

    private void menuBaseSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBaseSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuBaseSairActionPerformed

    private void menuPreReverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreReverterActionPerformed
        if (this.dsManipulavel.loadDataset()) {
            this.updateAll();
            this.insertLog("Reverteu a base de dados "+this.dsManipulavel.getDatasetName()+
                    " para seu estado original");
        }
    }//GEN-LAST:event_menuPreReverterActionPerformed

    private void menuSobreInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreInfoActionPerformed
        new About(this, true).setVisible(true);
    }//GEN-LAST:event_menuSobreInfoActionPerformed

    private void knnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knnExecuteActionPerformed
        if (this.dsManipulavel != null) {
            this.knn.setK((int) this.knnK.getValue());
            this.knn.setWeight((this.knnDW.getSelectedIndex() == 1));
            this.knn.setDataset(this.dsManipulavel, (double) this.baseSplit.getValue());
            if (this.knn.execute()) {
                String stats;
                stats = this.knn.getEvl().toSummaryString()+"\n";
                try {
                    stats += this.knn.getEvl().toMatrixString();
                } catch (Exception ex) {}
                stats = stats.replaceFirst("\n", "").substring(0, stats.length()-2);
                this.knnStats.setText(stats);
                this.insertLog("Executou o k-NN para a base "+this.dsManipulavel.getDatasetName()+
                        " com k="+this.knn.getK()+" e "+((this.knn.isWeight())?"com peso":"sem peso")+
                        " na distância, a taxa de acerto obtida foi de "+this.knn.getEvl().pctCorrect()+"%");
            }
        } else {
            JOptionPane.showMessageDialog(this, "É necessário carregar uma base de dados primeiro.");
        }
    }//GEN-LAST:event_knnExecuteActionPerformed

    private void knnMelhoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knnMelhoreActionPerformed
        if (this.dsManipulavel != null) {
            this.knn.setK(1);
            this.knn.setWeight(false);
            this.knn.setDataset(this.dsManipulavel, (double) this.baseSplit.getValue());
            this.knnCH.clear();
            double[][] results = this.knn.improve((int) this.knnK.getValue());
            for (int i = 0; i < 2; i++)
                for (int j = 0; j < results[i].length; j++)
                    this.knnCH.update(j+1, results[i][j], i);
            Utils.addPlot(this.knnChart, this.knnCH);
            this.knnK.setValue(this.knn.getK());
            this.knnDW.setSelectedIndex((this.knn.isWeight())?1:0);
            this.knnExecute.doClick();
            this.insertLog("Executou a busca pela melhor configuração do k-NN na base "+
                    this.dsManipulavel.getDatasetName()+", a configuração ideal encontrada foi "+
                    "k="+this.knn.getK()+" e "+((this.knn.isWeight())?"com peso":"sem peso")+" na distância, "+
                    "obtendo assim "+this.knn.getEvl().pctCorrect()+"% de acerto");
        } else {
            JOptionPane.showMessageDialog(this, "É necessário carregar uma base de dados primeiro.");
        }
    }//GEN-LAST:event_knnMelhoreActionPerformed

    private void menuPreNormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreNormActionPerformed
        if (this.dsManipulavel.normalize()) {
            this.updateAll();
            this.insertLog("Normalizou os dados da base de dados "+this.dsManipulavel.getDatasetName()+
                    " para um intervalo entre [0, 1]");
        }
    }//GEN-LAST:event_menuPreNormActionPerformed

    private void menuPreConversaoNumericoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreConversaoNumericoActionPerformed
        if (this.dsManipulavel.convertToNumeric()) {
            this.updateAll();
            this.insertLog("Converteu os dados categóricos da base de dados "+this.dsManipulavel.getDatasetName()+
                    " para numéricos (formato bit)");
        }
    }//GEN-LAST:event_menuPreConversaoNumericoActionPerformed

    private void menuPreRedAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreRedAttrActionPerformed
        if (this.dsManipulavel.getAttrNumeric() >= this.dsManipulavel.getNumAttr()-1)
            new ReducaoAtributos(this, true).open();
        else
            JOptionPane.showMessageDialog(this, "É necessário transformar os "+
                    "atributos categóricos em numéricos antes de prosseguir.");
    }//GEN-LAST:event_menuPreRedAttrActionPerformed

    private void menuPreRedInstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreRedInstActionPerformed
        new ReducaoInstancias(this, true).open();
    }//GEN-LAST:event_menuPreRedInstActionPerformed

    private void menuPreRedLDAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreRedLDAActionPerformed
        if (this.dsManipulavel.getAttrNumeric() >= this.dsManipulavel.getNumAttr()-1)
            if (this.dsManipulavel.getNumClass() > 2)
                JOptionPane.showMessageDialog(this, "A redução utilizando o LDA, para esse contexto, "
                        + "não é válida para problemas multiclasse.");
            else
                new ReducaoLDA(this, true).open();
        else
            JOptionPane.showMessageDialog(this, "É necessário transformar os "+
                    "atributos categóricos em numéricos antes de prosseguir.");
    }//GEN-LAST:event_menuPreRedLDAActionPerformed

    private void menuPreRedPCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreRedPCAActionPerformed
        if (this.dsManipulavel.getAttrNumeric() >= this.dsManipulavel.getNumAttr()-1)
            new ReducaoPCA(this, true).open();
        else
            JOptionPane.showMessageDialog(this, "É necessário transformar os "+
                    "atributos categóricos em numéricos antes de prosseguir.");
    }//GEN-LAST:event_menuPreRedPCAActionPerformed

    private void menuPreExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPreExportarActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Selecione o local para salvar o ARFF:");
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setFileFilter(new FileNameExtensionFilter("Base de dados ARFF", "arff"));
        int action = jfc.showSaveDialog(this);
        if (action == JFileChooser.APPROVE_OPTION) {
            if (this.dsManipulavel.saveDataset(jfc.getSelectedFile().getAbsolutePath())) {
                String msg = "Base de dados exportada como "+jfc.getSelectedFile().getName();
                if (!jfc.getSelectedFile().getName().contains(".arff"))
                    msg += ".arff";
                this.insertLog(msg);
            } else
                JOptionPane.showMessageDialog(this, "Não foi possível exportar a base "
                        + "de dados.");
        }
    }//GEN-LAST:event_menuPreExportarActionPerformed

    private void menuEnsHomoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEnsHomoActionPerformed
        new EnsembleHomogeneo(this, true).open();
    }//GEN-LAST:event_menuEnsHomoActionPerformed

    private void habilitar(boolean selec) {
        int comps_cnt = this.menuPre.getItemCount();
        for (int i = 0; i < comps_cnt; i++) {
            if(this.menuPre.getItem(i) != null) {
                if (selec) {
                    this.menuPre.getItem(i).setEnabled(true);
                } else {
                    this.menuPre.getItem(i).setEnabled(false);
                }
            }
        }
        comps_cnt = this.menuEns.getItemCount();
        for (int i = 0; i < comps_cnt; i++) {
            if(this.menuEns.getItem(i) != null) {
                if (selec) {
                    this.menuEns.getItem(i).setEnabled(true);
                } else {
                    this.menuEns.getItem(i).setEnabled(false);
                }
            }
        }
    }
    
    public void updateAll() {
        this.updateKNN();
        this.updateBaseTable();
        this.updateBaseStats();
        this.updateHist();
    }
    
    private void updateKNN() {
        this.knnCH.clear();
        this.knnStats.setText("");
        Utils.addPlot(this.knnChart, this.knnCH);
    }
    
    private void updateBaseStats() {
        this.baseNAtr.setText(this.dsManipulavel.getNumAttr()-1+"+1");
        this.baseNAtrN.setText(this.dsManipulavel.getAttrNumeric()+"");
        this.baseNAtrC.setText(this.dsManipulavel.getAttrCategorical()+"");
        this.baseNIns.setText(this.dsManipulavel.getNumInstances()+"");
        this.baseNCla.setText(this.dsManipulavel.getNumClass()+"");
    }
    
    private void updateHist() {
        this.hisCH.clear();
        for (int i = 0; i < this.dsManipulavel.getNumClass(); i++)
            this.hisCH.update(i+1, this.dsManipulavel.getNumInstancesClass(i), 0);
        Utils.addPlot(this.baseHistogram, this.hisCH);
    }
    
    private void updateBaseTable() {
        DefaultTableModel dtm = (DefaultTableModel) this.baseTabela.getModel();
        for (int i = dtm.getRowCount()-1; i >= 0; i--)
            dtm.removeRow(i);
        String[] nomes = this.dsManipulavel.getAttrsName();
        String[] tipos = this.dsManipulavel.getAttrsType();
        String[] escala = this.dsManipulavel.getAttrsEscala();
        double[] medias = this.dsManipulavel.getAttrsMean();
        double[] desvpa = this.dsManipulavel.getAttrsStDev();
        double[] varian = this.dsManipulavel.getAttrsVaria();
        for (int i = 0; i < this.dsManipulavel.getNumAttr(); i++)
            dtm.addRow(new Object[]{i+1, nomes[i], tipos[i], escala[i], medias[i], desvpa[i], varian[i]});
    }
    
    public void insertLog(String msg) {
        DateFormat hAtual = DateFormat.getTimeInstance();
        DateFormat dAtual = DateFormat.getDateInstance();
        this.baseLog.setText(this.baseLog.getText()+
                dAtual.format(new Date())+" "+hAtual.format(new Date())+
                "\t"+msg+"\n");
    }

    public KNearestNeighbour getKnn() {
        return knn;
    }

    public Dataset getDsManipulavel() {
        return dsManipulavel;
    }
    
    public double getSplitRatio() {
        return (double) this.baseSplit.getValue();
    }

    public void setDsManipulavel(Dataset dsManipulavel) {
        this.dsManipulavel = dsManipulavel;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | 
                IllegalAccessException | UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao iniciar o programa.");
            System.exit(0);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        new App().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel baseHistogram;
    private javax.swing.JLabel baseIcone;
    private javax.swing.JTextPane baseLog;
    private javax.swing.JLabel baseNAtr;
    private javax.swing.JLabel baseNAtrC;
    private javax.swing.JLabel baseNAtrN;
    private javax.swing.JLabel baseNCla;
    private javax.swing.JLabel baseNIns;
    private javax.swing.JSpinner baseSplit;
    private javax.swing.JLabel baseStatus;
    private javax.swing.JTable baseTabela;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPanel knnChart;
    private javax.swing.JComboBox knnDW;
    private javax.swing.JButton knnExecute;
    private javax.swing.JSpinner knnK;
    private javax.swing.JButton knnMelhore;
    private javax.swing.JPanel knnPanel;
    private javax.swing.JTextPane knnStats;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuBase;
    private javax.swing.JMenuItem menuBaseAbrir;
    private javax.swing.JMenuItem menuBaseSair;
    private javax.swing.JMenu menuEns;
    private javax.swing.JMenuItem menuEnsHomo;
    private javax.swing.JMenu menuPre;
    private javax.swing.JMenu menuPreConversao;
    private javax.swing.JMenuItem menuPreConversaoNumerico;
    private javax.swing.JMenuItem menuPreExportar;
    private javax.swing.JMenuItem menuPreNorm;
    private javax.swing.JMenu menuPreRed;
    private javax.swing.JMenuItem menuPreRedAttr;
    private javax.swing.JMenuItem menuPreRedInst;
    private javax.swing.JMenuItem menuPreRedLDA;
    private javax.swing.JMenuItem menuPreRedPCA;
    private javax.swing.JMenuItem menuPreReverter;
    private javax.swing.JMenu menuSobre;
    private javax.swing.JMenuItem menuSobreInfo;
    // End of variables declaration//GEN-END:variables
}
